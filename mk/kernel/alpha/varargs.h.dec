/*
 * Mach Operating System
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS-IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon the
 * the rights to redistribute these changes.
 */
/*
 * HISTORY
 * $Log:	varargs.h.dec,v $
 * Revision 2.2  93/01/14  17:14:52  danner
 * 	RCS-ed.
 * 	[92/12/10            af]
 * 
 */

#ifndef _VARARGS_H_
#define _VARARGS_H_

#ifndef _VA_LIST
#define _VA_LIST
typedef struct {
	char	*a0;		/* pointer to first homed integer arg */
	int	offset;		/* byte offset of next param */
} va_list;
#endif	/* _VA_LIST */

#define va_dcl long va_alist;
#define va_start(list) __builtin_va_start(list, va_alist, 0)
#define va_end(list)
#define va_arg(list, mode) \
	(*(((list).offset += ((int)sizeof(mode) + 7) & -8), \
	    (mode *)((list).a0 + (list).offset - \
		((__builtin_isfloat(mode) && (list).offset <= (6 * 8)) ? \
		(6 * 8) + 8 : ((int)sizeof(mode) + 7) & -8))))
#define va_arg_sub(list, mode) \
	(list).offset -= ((int)sizeof(mode) + 7) & -8


#endif /* _VARARGS_H_ */
